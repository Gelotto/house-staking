#!/usr/bin/bash
#
# copy compiled wasm target to docker container running local dev validator
# and deploy it.

# directory in which this script exists
SCRIPT_DIR=$(dirname -- "$0")

# get CLI arguments
WASM_FILEPATH=$1
CHAIN_ID_TYPE=$2
NETWORK=$3
SENDER=$4

echo ">>> WASM filepath: $WASM_FILEPATH"
echo ">>> Network: $NETWORK"
echo ">>> Network Environment: $CHAIN_ID_TYPE"
echo ">>> Sender: $SENDER"

# get the build name or default to current unix timestamp
if [ -z "$5" ]; then
  BUILD_NAME="$(date +%s)"
else
  BUILD_NAME=$5
fi

source $SCRIPT_DIR/chain-utils

# compute network and environment-specific vars
VALIDATOR_DOCKER_CONTAINER_NAME=$(validator-container-name $CHAIN_ID_TYPE)
BINARY=$(cli-name $CHAIN_ID_TYPE)
CHAIN_ID=$(chain-id $CHAIN_ID_TYPE $NETWORK)
NODE=$(node-url $CHAIN_ID_TYPE $NETWORK)
DENOM=$(micro-denom $CHAIN_ID_TYPE $NETWORK)
GAS_PRICES="$(gas-prices $CHAIN_ID_TYPE $NETWORK)"

echo ">>> Validator Container: $VALIDATOR_DOCKER_CONTAINER_NAME"
echo ">>> Chain ID: $CHAIN_ID"
echo ">>> RPC Node: $NODE"
echo ">>> Gas Prices: $GAS_PRICES"

BASE_BUILD_DIR="./builds/$NETWORK"
BUILD_DIR="$BASE_BUILD_DIR/$BUILD_NAME"
WASM_FILENAME=$(basename $WASM_FILEPATH)
CODE_ID_FILENAME="code-id"

# deploy to mainnet or testnet
function deploy() {
  NODECHAIN=" --node $NODE --chain-id $CHAIN_ID"
  TXFLAG=" $NODECHAIN --gas auto --gas-adjustment 1.3 \
    $(wasm-store-instantiation-fees-flag $CHAIN_ID_TYPE $NETWORK)"
  CMD="$BINARY tx wasm store $WASM_FILEPATH --from $SENDER $TXFLAG --output json -y "
  
  echo ">>> Running: $CMD"

  JSON_RESULT=$($CMD)
  
  echo "$JSON_RESULT" 

  UPLOADTX=$(echo $JSON_RESULT | jq -r '.txhash')
  if [ -z "$UPLOADTX" ]; then
    exit -1
  fi

  echo ">>> Tx hash: $UPLOADTX"

	CODE_ID=""
  CODE_ID_JSON_PATH=".logs[0].events[-1].attributes[-1].value"

  # poll for new code ID
  while [[ $CODE_ID == "" ]]
  do 
      sleep 3  # wait for wasm store command to complete
      echo "$BINARY query tx $UPLOADTX $NODECHAIN --output json | jq -r $CODE_ID_JSON_PATH"
      exec_result=$($BINARY query tx $UPLOADTX $NODECHAIN --output json)
      CODE_ID=$(echo "$exec_result" | jq -r $CODE_ID_JSON_PATH)
  done

  echo ">>> Code ID: $CODE_ID"

  # upsert top-level build dir
  mkdir -p $BUILD_DIR

  # save code ID to file and copy wasm file to same build dir
  echo $CODE_ID > "$BUILD_DIR/$CODE_ID_FILENAME"
  cp $WASM_FILEPATH $BUILD_DIR/
}

# deploy to local test validator
function deploy_local() {
  set -e  # exit immediately upon first error

  # copy wasm artifact to container
  docker cp $WASM_FILEPATH $VALIDATOR_DOCKER_CONTAINER_NAME:/$WASM_FILENAME >/dev/null

  CMD="$PREAMBLE $BINARY tx wasm store "$WASM_FILEPATH" \
    --gas-prices $GAS_PRICES \
    --gas auto \
    --gas-adjustment 1.3 \
    --from $SENDER \
    --node $NODE \
    --chain-id $CHAIN_ID \
    --output json \
    -b sync \
    -y"

  echo ">>> Running: $CMD"
  RESP=`$CMD`

  # upsert top-level build directory
  mkdir -p $BUILD_DIR

  TXHASH=$(echo "$RESP" | jq -r '.txhash')
  echo $RESP
  echo ">>> Tx hash: $TXHASH"

  # poll for new code ID
  CODE_ID=""
  while [[ $CODE_ID == "" || $CODE_ID == "null" ]]
  do
    echo ">>> Polling for finalized transaction..."
    CODE_ID=$($PREAMBLE $BINARY query tx $TXHASH --output json \
        | jq -r '.logs[0].events[-1].attributes[-1].value')
    sleep 2
  done

  # write code ID to file
  echo "$CODE_ID" >"$BUILD_DIR/$CODE_ID_FILENAME"
  echo ">>> Code ID: $CODE_ID"

  cp $WASM_FILEPATH "$BUILD_DIR/"
}

# program point of entry
mkdir -p $BUILD_DIR
echo "$BUILD_NAME" > "$BASE_BUILD_DIR/latest"

case $CHAIN_ID_TYPE in
    mainnet)
        deploy;;
    testnet)
        deploy;;
    devnet|*)
        deploy_local;;
esac
